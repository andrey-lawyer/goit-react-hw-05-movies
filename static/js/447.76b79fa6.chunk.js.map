{"version":3,"file":"static/js/447.76b79fa6.chunk.js","mappings":"2QAkEA,EA7DqB,WACnB,IAAQA,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAAkCE,EAAAA,EAAAA,UAAS,CAAC,GAA5C,eAAOC,EAAP,KAAkBC,EAAlB,KACA,GAAkCF,EAAAA,EAAAA,WAAS,GAA3C,eAAOG,EAAP,KAAkBC,EAAlB,MAEAC,EAAAA,EAAAA,YAAU,WCRL,IAA4BC,EDS/BF,GAAa,ICTkBE,EDUZR,ECTdS,EAAAA,EAAAA,IAAA,6CAEmCD,EAFnC,8CAIJE,MAAK,SAAAC,GACJ,MAQIA,EAAQC,KAPVC,EADF,EACEA,OACAL,EAFF,EAEEA,GACAM,EAHF,EAGEA,MACAC,EAJF,EAIEA,SACAC,EALF,EAKEA,WACAC,EANF,EAMEA,YACAC,EAPF,EAOEA,aAgBF,MAAO,CACLC,UAfqBN,EAAOO,KAAI,SAAAC,GAAE,OAAIA,EAAGC,IAAP,IACHC,KAAK,KAepCf,GAAAA,EACAM,MAAAA,EACAC,SAAAA,EACAC,WAAAA,EACAQ,WAPiBC,iCAA6BR,EAQ9CS,UAnBgBC,KAAKC,MAAqB,GAAfV,GAqB9B,KD3BER,MAAK,SAAAE,GACJN,GAAa,GACbF,EAAaQ,EACd,IACAiB,OAAM,WACLC,IAAAA,OAAAA,QAAwB,0BACzB,GACJ,GAAE,CAAC9B,IACJ,IAAQmB,EAAsDhB,EAAtDgB,UAAWL,EAA2CX,EAA3CW,MAAOC,EAAoCZ,EAApCY,SAAUS,EAA0BrB,EAA1BqB,WAAYE,EAAcvB,EAAduB,UAC1CK,GAAWC,EAAAA,EAAAA,MAEjB,GAAwC9B,EAAAA,EAAAA,UAAS,KAAjD,eAAO+B,EAAP,KAAqBC,EAArB,KAOA,OANA3B,EAAAA,EAAAA,YAAU,WACJwB,EAASI,OACXD,EAAgBH,EAASI,MAAMC,KAElC,GAAE,CAACL,EAASI,SAGX,8BACG9B,GACC,SAAC,KAAD,CACEgC,OAAO,KACPC,MAAM,KACNC,OAAO,IACPC,MAAM,UACNC,UAAU,qBACVC,aAAc,CAAC,EACfC,iBAAiB,GACjBC,SAAS,KAGX,6BACE,wBAAK9B,KACL,SAAC,KAAD,CAAM+B,GAAIZ,EAAV,uBACA,gBAAKa,IAAKtB,EAAYuB,IAAKvB,KAC3B,uCACA,4BAAOE,EAAP,QACA,qCACA,0BAAOX,KACP,mCACA,0BAAOI,KACP,mDACA,SAAC,KAAD,CAAM0B,GAAG,OAAT,mBACA,SAAC,KAAD,CAAMA,GAAG,UAAT,sBACA,SAAC,EAAAG,SAAD,CAAUC,SAAU,KAApB,UACE,SAAC,KAAD,UAMX,C","sources":["pages/MovieDetails.jsx","requests/axiosFullInfoMovie.js"],"sourcesContent":["import Notiflix from 'notiflix';\nimport { Link, Outlet, useLocation, useParams } from 'react-router-dom';\nimport { ThreeDots } from 'react-loader-spinner';\nimport React, { useState, useEffect, Suspense } from 'react';\nimport { axiosFullInfoMovie } from '../requests/axiosFullInfoMovie';\nconst MovieDetails = () => {\n  const { movieId } = useParams();\n  const [infoMovie, setInfoMovie] = useState({});\n  const [isLoading, setIsLoading] = useState(false);\n\n  useEffect(() => {\n    setIsLoading(true);\n    axiosFullInfoMovie(movieId)\n      .then(data => {\n        setIsLoading(false);\n        setInfoMovie(data);\n      })\n      .catch(() => {\n        Notiflix.Notify.failure('Something went wrong...');\n      });\n  }, [movieId]);\n  const { newGenres, title, overview, imageMovie, userScore } = infoMovie;\n  const location = useLocation();\n\n  const [locationUser, setLocationUser] = useState('/');\n  useEffect(() => {\n    if (location.state) {\n      setLocationUser(location.state.from);\n    }\n  }, [location.state]);\n\n  return (\n    <>\n      {isLoading ? (\n        <ThreeDots\n          height=\"80\"\n          width=\"80\"\n          radius=\"9\"\n          color=\"#4a3b98\"\n          ariaLabel=\"three-dots-loading\"\n          wrapperStyle={{}}\n          wrapperClassName=\"\"\n          visible={true}\n        />\n      ) : (\n        <main>\n          <h1>{title}</h1>\n          <Link to={locationUser}> Go Back</Link>\n          <img src={imageMovie} alt={imageMovie} />\n          <p>User Score</p>\n          <span>{userScore}%</span>\n          <p>Overview</p>\n          <span>{overview}</span>\n          <p>Genres</p>\n          <span>{newGenres}</span>\n          <p>Additional information</p>\n          <Link to=\"cast\">Cast</Link>\n          <Link to=\"reviews\">Reviews</Link>\n          <Suspense fallback={null}>\n            <Outlet />\n          </Suspense>\n        </main>\n      )}\n    </>\n  );\n};\nexport default MovieDetails;\n","import axios from 'axios';\n\nexport function axiosFullInfoMovie(id) {\n  return axios\n    .get(\n      `https://api.themoviedb.org/3/movie/${id}?api_key=cbd8d541379b4f719065dc7272b2c5fd`\n    )\n    .then(promise => {\n      const {\n        genres,\n        id,\n        title,\n        overview,\n        popularity,\n        poster_path,\n        vote_average,\n      } = promise.data;\n      const newArrayGenres = genres.map(el => el.name);\n      const newGenres = newArrayGenres.join(' ');\n      const userScore = Math.round(vote_average * 10);\n      const poster_sizes = [\n        'w92',\n        'w154',\n        'w185',\n        'w342',\n        'w500',\n        'w780',\n        'original',\n      ];\n      const base_url = 'http://image.tmdb.org/t/p/';\n      const imageMovie = base_url + poster_sizes[4] + poster_path;\n      return {\n        newGenres,\n        id,\n        title,\n        overview,\n        popularity,\n        imageMovie,\n        userScore,\n      };\n    });\n}\n"],"names":["movieId","useParams","useState","infoMovie","setInfoMovie","isLoading","setIsLoading","useEffect","id","axios","then","promise","data","genres","title","overview","popularity","poster_path","vote_average","newGenres","map","el","name","join","imageMovie","base_url","userScore","Math","round","catch","Notiflix","location","useLocation","locationUser","setLocationUser","state","from","height","width","radius","color","ariaLabel","wrapperStyle","wrapperClassName","visible","to","src","alt","Suspense","fallback"],"sourceRoot":""}