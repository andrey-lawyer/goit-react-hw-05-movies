{"version":3,"file":"static/js/485.9b368475.chunk.js","mappings":"0PAmCA,EA9BgB,WACd,IAAQA,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAAsCE,EAAAA,EAAAA,UAAS,CAAC,GAAhD,eAAOC,EAAP,KAAoBC,EAApB,KAWA,OAVAC,EAAAA,EAAAA,YAAU,WCNL,IAA2BC,KDOZN,ECNbO,EAAAA,EAAAA,IAAA,6CAEmCD,EAFnC,sDAIJE,MAAK,SAAAC,GASJ,OARgBA,EAAQC,KAAKC,QAAQC,KACnC,kBAA4D,CAC1DN,GADF,EAAGA,GAEDO,OAFF,EAAOA,OAGLC,SAHF,EAAeC,eAAkBD,SAI/BE,QAJF,EAA6CA,QAA7C,GAQH,KDPER,MAAK,SAAAE,GACJN,EAAeM,EAChB,IACAO,OAAM,WACLC,IAAAA,OAAAA,QAAwB,0BACzB,GACJ,GAAE,CAAClB,KAGF,8BACGG,EAAYgB,OAAS,GACpB,wBACGhB,EAAYS,KAAI,gBAAGN,EAAH,EAAGA,GAAIO,EAAP,EAAOA,OAAkBG,GAAzB,EAAeF,SAAf,EAAyBE,SAAzB,OACf,2BACE,oCAAYH,EAAZ,QACA,uBAAIG,MAFGV,EADM,OAQnB,uEAIP,C","sources":["components/Reviews.jsx","requests/axiosReviewsMovie.js"],"sourcesContent":["import Notiflix from 'notiflix';\nimport React, { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { axiosReviewsMovie } from '../requests/axiosReviewsMovie';\n\nconst Reviews = () => {\n  const { movieId } = useParams();\n  const [infoReviews, setInfoReviews] = useState({});\n  useEffect(() => {\n    axiosReviewsMovie(movieId)\n      .then(data => {\n        setInfoReviews(data);\n      })\n      .catch(() => {\n        Notiflix.Notify.failure('Something went wrong...');\n      });\n  }, [movieId]);\n\n  return (\n    <>\n      {infoReviews.length > 0 ? (\n        <ul>\n          {infoReviews.map(({ id, author, username, content }) => (\n            <li key={id}>\n              <p>Author: {author} </p>\n              <p>{content}</p>\n            </li>\n          ))}\n        </ul>\n      ) : (\n        <p> We do not have any reviews for this movie</p>\n      )}\n    </>\n  );\n};\nexport default Reviews;\n","import axios from 'axios';\n\nexport function axiosReviewsMovie(id) {\n  return axios\n    .get(\n      `https://api.themoviedb.org/3/movie/${id}/reviews?api_key=cbd8d541379b4f719065dc7272b2c5fd`\n    )\n    .then(promise => {\n      const reviews = promise.data.results.map(\n        ({ id, author, author_details: { username }, content }) => ({\n          id,\n          author,\n          username,\n          content,\n        })\n      );\n      return reviews;\n    });\n}\n"],"names":["movieId","useParams","useState","infoReviews","setInfoReviews","useEffect","id","axios","then","promise","data","results","map","author","username","author_details","content","catch","Notiflix","length"],"sourceRoot":""}