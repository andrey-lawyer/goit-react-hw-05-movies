{"version":3,"file":"static/js/193.ee0ed3f2.chunk.js","mappings":"+NAEaA,GAAUC,EAAAA,EAAAA,IAAOC,EAAAA,GAAPD,CAAH,oPAcPE,EAAgBF,EAAAA,GAAAA,GAAH,oE,qFCXbG,EAAa,SAAC,GAAe,IAAbC,EAAY,EAAZA,MACrBC,GAAWC,EAAAA,EAAAA,MAEjB,OACE,wBACGF,EAAMG,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,MAAP,OACT,yBACE,SAAC,IAAD,CAASC,GAAE,kBAAaF,GAAMG,MAAO,CAAEC,KAAMP,GAA7C,UACE,uBAAII,OAFCD,EADA,KAShB,C,qKCjBYK,EAAYb,EAAAA,GAAAA,IAAH,+CAGTc,EAAad,EAAAA,GAAAA,KAAH,wPAaVe,EAAmBf,EAAAA,GAAAA,OAAH,6aAkBhBgB,EAAwBhB,EAAAA,GAAAA,KAAH,6MAYrBiB,EAAkBjB,EAAAA,GAAAA,MAAH,0P,SCnCfkB,EAAa,WACxB,OAAoCC,EAAAA,EAAAA,UAAS,IAA7C,eAAOC,EAAP,KAAmBC,EAAnB,KACA,GAAwCC,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,KAAqBC,EAArB,KAKAC,QAAQC,IAAIH,GAaZ,OACE,SAACV,EAAD,WACE,UAACC,EAAD,CAAYa,SAbK,SAAAC,GACnBA,EAAMC,iBAEoB,KAAtBT,EAAWU,QAIfN,EAAgB,CAAEO,MAAOX,IACzBC,EAAc,KAJZW,IAAAA,OAAAA,QAAA,iCAKH,EAIG,WACE,SAACjB,EAAD,CAAkBkB,KAAK,SAAvB,UACE,SAACjB,EAAD,wBAEF,SAACC,EAAD,CACEgB,KAAK,OACLC,aAAa,MACbC,WAAS,EACTC,YAAY,gBACZC,MAAOjB,EACPkB,SA5BiB,SAAAV,GACvBP,EAAcO,EAAMW,cAAcF,MAAMG,cACzC,QA+BF,E,SC/CYC,EAAmB,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OACjC,OAAO,8BAAGA,EAAOC,OAAS,IAAK,SAACxC,EAAA,EAAD,CAAYC,MAAOsC,KACnD,ECmDD,EA7Ce,WACb,OAAwBvB,EAAAA,EAAAA,UAAS,IAAjC,eAAOyB,EAAP,KAAaC,EAAb,KACA,GAAkC1B,EAAAA,EAAAA,WAAS,GAA3C,eAAO2B,EAAP,KAAkBC,EAAlB,KACA,GAAuBzB,EAAAA,EAAAA,MAAhBC,GAAP,eAyBA,OAvBAyB,EAAAA,EAAAA,YAAU,WACR,ICf6BC,EDevBlB,EAAQR,EAAa2B,IAAI,SAE1BnB,IAGLgB,GAAa,ICpBgBE,EDqBZlB,ECpBZoB,EAAAA,EAAAA,IAAA,mGAEyFF,IAE7FG,MAAK,SAAAC,GAKJ,OAJgBA,EAAQT,KAAKU,QAAQ/C,KAAI,kBAAoB,CAC3DC,GADuC,EAAGA,GAE1CC,MAFuC,EAAOA,MAAP,GAK1C,KDWE2C,MAAK,SAAAR,GACCA,EAAKD,OAMVE,EAAQD,GALNZ,IAAAA,OAAAA,QACE,0EAKL,IACAuB,OAAM,WACLvB,IAAAA,OAAAA,QAAwB,0BACzB,IACAwB,SAAQ,kBAAMT,GAAa,EAAnB,IACZ,GAAE,CAACxB,KAGF,6BACE,SAACL,EAAD,IACC4B,GACC,SAAC,KAAD,CACEW,YAAY,OACZC,YAAY,IACZC,kBAAkB,OAClBC,MAAM,KACNC,SAAS,KAGX,SAACpB,EAAD,CAAkBC,OAAQE,MAIjC,C","sources":["components/ListMovie/ListMovies.Styled.js","components/ListMovie/ListMovies.jsx","components/FormMovie/FormMovies.Styled.js","components/FormMovie/FormMovies.jsx","components/ListSearchMovie/ListSearchMovies.jsx","pages/Movies.jsx","requests/axiosSearchMovie.js"],"sourcesContent":["import styled from 'styled-components';\nimport { NavLink } from 'react-router-dom';\nexport const NavItem = styled(NavLink)`\n  text-decoration: none;\n  display: block;\n  font-size: 20px;\n  padding-top: 10px;\n  color: #1631cd;\n\n  :hover:not(.active),\n  :focus-visible:not(.active) {\n    color: red;\n    text-decoration: underline;\n  }\n`;\n\nexport const TitleTrending = styled.h1`\n  margin-bottom: 10px;\n  margin-top: 10px;\n`;\n","import { useLocation } from 'react-router-dom';\nimport PropTypes from 'prop-types';\n\nimport { NavItem } from './ListMovies.Styled';\n\nexport const ListMovies = ({ films }) => {\n  const location = useLocation();\n\n  return (\n    <ul>\n      {films.map(({ id, title }) => (\n        <li key={id}>\n          <NavItem to={`/movies/${id}`} state={{ from: location }}>\n            <p>{title}</p>\n          </NavItem>\n        </li>\n      ))}\n    </ul>\n  );\n};\n\nListMovies.propTypes = {\n  films: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      title: PropTypes.string.isRequired,\n    }).isRequired\n  ).isRequired,\n};\n","import styled from 'styled-components';\n\nexport const BlockForm = styled.div`\n  position: relative;\n`;\nexport const SearchForm = styled.form`\n  display: flex;\n  align-items: center;\n  width: 100%;\n  max-width: 600px;\n  background-color: #fff;\n  border-radius: 3px;\n  overflow: hidden;\n  position: absolute;\n  top: -60px;\n  left: 350px;\n  z-index: 999999;\n`;\nexport const SearchFormButton = styled.button`\n  display: inline-block;\n  width: 48px;\n  height: 41px;\n  border: 0;\n  background-image: url('https://linhpham.me/miu/icons/svg/common-search-lookup-glyph.svg');\n  background-size: 40%;\n  background-repeat: no-repeat;\n  background-position: center;\n  opacity: 0.6;\n  transition: opacity 250ms cubic-bezier(0.4, 0, 0.2, 1);\n  cursor: pointer;\n  outline: none;\n  :hover {\n    opacity: 1;\n  }\n`;\n\nexport const SearchFormButtonLabel = styled.span`\n  position: absolute;\n  width: 1px;\n  height: 1px;\n  padding: 0;\n  overflow: hidden;\n  clip: rect(0, 0, 0, 0);\n  white-space: nowrap;\n  clip-path: inset(50%);\n  border: 0;\n`;\n\nexport const SearchFormInput = styled.input`\n  display: inline-block;\n  width: 100%;\n  font: inherit;\n  font-size: 20px;\n  border: none;\n  outline: none;\n  padding-left: 4px;\n  padding-right: 4px;\n  ::placeholder {\n    font: inherit;\n    font-size: 18px;\n  }\n`;\n","import React, { useState } from 'react';\nimport { useSearchParams } from 'react-router-dom';\n\nimport Notiflix from 'notiflix';\n\nimport {\n  SearchForm,\n  SearchFormButton,\n  SearchFormInput,\n  SearchFormButtonLabel,\n  BlockForm,\n} from './FormMovies.Styled';\n\nexport const FormMovies = () => {\n  const [searchName, setSearchName] = useState('');\n  const [searchParams, setSearchParams] = useSearchParams();\n\n  const handleNameChange = event => {\n    setSearchName(event.currentTarget.value.toLowerCase());\n  };\n  console.log(searchParams);\n\n  const handleSubmit = event => {\n    event.preventDefault();\n\n    if (searchName.trim() === '') {\n      Notiflix.Notify.failure(`Enter data in the search field`);\n      return;\n    }\n    setSearchParams({ query: searchName });\n    setSearchName('');\n  };\n\n  return (\n    <BlockForm>\n      <SearchForm onSubmit={handleSubmit}>\n        <SearchFormButton type=\"submit\">\n          <SearchFormButtonLabel>Search</SearchFormButtonLabel>\n        </SearchFormButton>\n        <SearchFormInput\n          type=\"text\"\n          autoComplete=\"off\"\n          autoFocus\n          placeholder=\"Search movies\"\n          value={searchName}\n          onChange={handleNameChange}\n        />\n      </SearchForm>\n    </BlockForm>\n  );\n};\n","import PropTypes from 'prop-types';\nimport { ListMovies } from '../ListMovie/ListMovies';\n\nexport const ListSearchMovies = ({ movies }) => {\n  return <>{movies.length > 0 && <ListMovies films={movies} />}</>;\n};\n\nListSearchMovies.propTypes = {\n  movies: PropTypes.array.isRequired,\n};\n","import React, { useState, useEffect } from 'react';\nimport { RotatingLines } from 'react-loader-spinner';\nimport { useSearchParams } from 'react-router-dom';\n\nimport Notiflix from 'notiflix';\n\nimport { axiosSearchMovie } from '../requests/axiosSearchMovie';\n\nimport { FormMovies } from '../components/FormMovie/FormMovies';\nimport { ListSearchMovies } from 'components/ListSearchMovie/ListSearchMovies';\n\nconst Movies = () => {\n  const [data, setData] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [searchParams] = useSearchParams();\n\n  useEffect(() => {\n    const query = searchParams.get('query');\n\n    if (!query) {\n      return;\n    }\n    setIsLoading(true);\n    axiosSearchMovie(query)\n      .then(data => {\n        if (!data.length) {\n          Notiflix.Notify.failure(\n            'Sorry, there are no images matching your search query.Please try again.'\n          );\n          return;\n        }\n        setData(data);\n      })\n      .catch(() => {\n        Notiflix.Notify.failure('Something went wrong...');\n      })\n      .finally(() => setIsLoading(false));\n  }, [searchParams]);\n\n  return (\n    <main>\n      <FormMovies />\n      {isLoading ? (\n        <RotatingLines\n          strokeColor=\"grey\"\n          strokeWidth=\"5\"\n          animationDuration=\"0.75\"\n          width=\"96\"\n          visible={true}\n        />\n      ) : (\n        <ListSearchMovies movies={data} />\n      )}\n    </main>\n  );\n};\nexport default Movies;\n","import axios from 'axios';\n\nexport function axiosSearchMovie(nameMovie) {\n  return axios\n    .get(\n      `https://api.themoviedb.org/3/search/movie?api_key=cbd8d541379b4f719065dc7272b2c5fd&query=${nameMovie}`\n    )\n    .then(promise => {\n      const newData = promise.data.results.map(({ id, title }) => ({\n        id,\n        title,\n      }));\n      return newData;\n    });\n}\n"],"names":["NavItem","styled","NavLink","TitleTrending","ListMovies","films","location","useLocation","map","id","title","to","state","from","BlockForm","SearchForm","SearchFormButton","SearchFormButtonLabel","SearchFormInput","FormMovies","useState","searchName","setSearchName","useSearchParams","searchParams","setSearchParams","console","log","onSubmit","event","preventDefault","trim","query","Notiflix","type","autoComplete","autoFocus","placeholder","value","onChange","currentTarget","toLowerCase","ListSearchMovies","movies","length","data","setData","isLoading","setIsLoading","useEffect","nameMovie","get","axios","then","promise","results","catch","finally","strokeColor","strokeWidth","animationDuration","width","visible"],"sourceRoot":""}