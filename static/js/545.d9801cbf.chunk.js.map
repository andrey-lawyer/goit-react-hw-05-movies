{"version":3,"file":"static/js/545.d9801cbf.chunk.js","mappings":"sPAEaA,EAAa,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAC3B,GAAoCC,EAAAA,EAAAA,UAAS,IAA7C,eAAOC,EAAP,KAAmBC,EAAnB,KAiBA,OACE,kBAAMH,SAZa,SAAAI,GACnBA,EAAMC,iBAEoB,KAAtBH,EAAWI,QAKfN,EAASE,GACTC,EAAc,KALZI,IAAAA,OAAAA,QAAA,iCAMH,EAEC,WACE,mBAAQC,KAAK,SAAb,qBACA,kBACEA,KAAK,OACLC,aAAa,MACbC,WAAS,EACTC,YAAY,gBACZC,MAAOV,EACPW,SAxBmB,SAAAT,GACvBD,EAAcC,EAAMU,cAAcF,MAAMG,cACzC,MA0BF,E,qBChCYC,EAAmB,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OAC3BC,GAAWC,EAAAA,EAAAA,MACjB,OACE,iCACE,0CACCF,EAAOG,OAAS,IACf,wBACGH,EAAOI,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,MAAP,OACV,yBACE,SAAC,KAAD,CAAMC,GAAE,UAAKF,GAAMG,MAAO,CAAEC,KAAMR,GAAlC,UACE,uBAAIK,OAFCD,EADC,QAWrB,EC0CD,EApDe,WACb,OAAoCrB,EAAAA,EAAAA,UAAS,IAA7C,eAAOC,EAAP,KAAmBC,EAAnB,KACA,GAAwBF,EAAAA,EAAAA,UAAS,IAAjC,eAAO0B,EAAP,KAAaC,EAAb,KACA,GAAkC3B,EAAAA,EAAAA,WAAS,GAA3C,eAAO4B,EAAP,KAAkBC,EAAlB,KACMC,GAAWC,EAAAA,EAAAA,MA8BjB,OAvBAC,EAAAA,EAAAA,YAAU,WClBL,IAA0BC,EDmBxBhC,IAGL4B,GAAa,ICtBgBI,EDuBZhC,ECtBZiC,EAAAA,EAAAA,IAAA,mGAEyFD,IAE7FE,MAAK,SAAAC,GAKJ,OAJgBA,EAAQV,KAAKW,QAAQjB,KAAI,kBAAoB,CAC3DC,GADuC,EAAGA,GAE1CC,MAFuC,EAAOA,MAAP,GAK1C,KDaEa,MAAK,SAAAT,GACAA,GACFI,EAAS,iBAAD,OAAkB7B,GAAc,CAAEqC,SAAS,IAErDT,GAAa,GACRH,EAAKP,OAMVQ,EAAQD,GALNpB,IAAAA,OAAAA,QACE,0EAKL,IACAiC,OAAM,WACLjC,IAAAA,OAAAA,QAAwB,0BACzB,IACJ,GAAE,CAACwB,EAAU7B,KAEZ,6BACE,oCACA,SAACH,EAAD,CAAYC,SA/BS,SAAAE,GACvBC,EAAcD,GACd0B,EAAQ,GACT,IA6BIC,GACC,SAAC,KAAD,CACEY,YAAY,OACZC,YAAY,IACZC,kBAAkB,OAClBC,MAAM,KACNC,SAAS,KAGX,SAAC7B,EAAD,CAAkBC,OAAQU,MAIjC,C","sources":["pages/FormMovies.jsx","components/ListSearchMovies.jsx","pages/Movies.jsx","requests/axiosSearchMovie.js"],"sourcesContent":["import Notiflix from 'notiflix';\nimport React, { useState } from 'react';\nexport const FormMovies = ({ onSubmit }) => {\n  const [searchName, setSearchName] = useState('');\n\n  const handleNameChange = event => {\n    setSearchName(event.currentTarget.value.toLowerCase());\n  };\n\n  const handleSubmit = event => {\n    event.preventDefault();\n\n    if (searchName.trim() === '') {\n      Notiflix.Notify.failure(`Enter data in the search field`);\n      return;\n    }\n\n    onSubmit(searchName);\n    setSearchName('');\n  };\n  return (\n    <form onSubmit={handleSubmit}>\n      <button type=\"submit\">Search</button>\n      <input\n        type=\"text\"\n        autoComplete=\"off\"\n        autoFocus\n        placeholder=\"Search movies\"\n        value={searchName}\n        onChange={handleNameChange}\n      />\n    </form>\n  );\n};\n","import { Link, useLocation } from 'react-router-dom';\nexport const ListSearchMovies = ({ movies }) => {\n  const location = useLocation();\n  return (\n    <>\n      <h2>Search Movies</h2>\n      {movies.length > 0 && (\n        <ul>\n          {movies.map(({ id, title }) => (\n            <li key={id}>\n              <Link to={`${id}`} state={{ from: location }}>\n                <p>{title}</p>\n              </Link>\n            </li>\n          ))}\n        </ul>\n      )}\n    </>\n  );\n};\n","import Notiflix from 'notiflix';\nimport React, { useState, useEffect } from 'react';\nimport { RotatingLines } from 'react-loader-spinner';\nimport { useNavigate } from 'react-router-dom';\n\nimport { FormMovies } from './FormMovies';\nimport { axiosSearchMovie } from '../requests/axiosSearchMovie';\nimport { ListSearchMovies } from 'components/ListSearchMovies';\n\nconst Movies = () => {\n  const [searchName, setSearchName] = useState('');\n  const [data, setData] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const navigate = useNavigate();\n\n  const handleFormSubmit = searchName => {\n    setSearchName(searchName);\n    setData([]);\n  };\n\n  useEffect(() => {\n    if (!searchName) {\n      return;\n    }\n    setIsLoading(true);\n    axiosSearchMovie(searchName)\n      .then(data => {\n        if (data) {\n          navigate(`/movies?query=${searchName}`, { replace: true });\n        }\n        setIsLoading(false);\n        if (!data.length) {\n          Notiflix.Notify.failure(\n            'Sorry, there are no images matching your search query.Please try again.'\n          );\n          return;\n        }\n        setData(data);\n      })\n      .catch(() => {\n        Notiflix.Notify.failure('Something went wrong...');\n      });\n  }, [navigate, searchName]);\n  return (\n    <main>\n      <h1>Movies</h1>\n      <FormMovies onSubmit={handleFormSubmit} />\n      {isLoading ? (\n        <RotatingLines\n          strokeColor=\"grey\"\n          strokeWidth=\"5\"\n          animationDuration=\"0.75\"\n          width=\"96\"\n          visible={true}\n        />\n      ) : (\n        <ListSearchMovies movies={data} />\n      )}\n    </main>\n  );\n};\nexport default Movies;\n","import axios from 'axios';\n\nexport function axiosSearchMovie(nameMovie) {\n  return axios\n    .get(\n      `https://api.themoviedb.org/3/search/movie?api_key=cbd8d541379b4f719065dc7272b2c5fd&query=${nameMovie}`\n    )\n    .then(promise => {\n      const newData = promise.data.results.map(({ id, title }) => ({\n        id,\n        title,\n      }));\n      return newData;\n    });\n}\n"],"names":["FormMovies","onSubmit","useState","searchName","setSearchName","event","preventDefault","trim","Notiflix","type","autoComplete","autoFocus","placeholder","value","onChange","currentTarget","toLowerCase","ListSearchMovies","movies","location","useLocation","length","map","id","title","to","state","from","data","setData","isLoading","setIsLoading","navigate","useNavigate","useEffect","nameMovie","axios","then","promise","results","replace","catch","strokeColor","strokeWidth","animationDuration","width","visible"],"sourceRoot":""}